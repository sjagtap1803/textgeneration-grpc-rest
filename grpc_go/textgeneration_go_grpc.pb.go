//Toy gRPC project

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: textgeneration_go.proto

package grpc_gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextGeneration_ProcessTextGen_FullMethodName              = "/textgeneration.TextGeneration/ProcessTextGen"
	TextGeneration_ProcessTextGenMultiStream_FullMethodName   = "/textgeneration.TextGeneration/ProcessTextGenMultiStream"
	TextGeneration_ProcessTextGenStreamRequest_FullMethodName = "/textgeneration.TextGeneration/ProcessTextGenStreamRequest"
	TextGeneration_ProcessTextGenStream_FullMethodName        = "/textgeneration.TextGeneration/ProcessTextGenStream"
	TextGeneration_SingleFileUpload_FullMethodName            = "/textgeneration.TextGeneration/SingleFileUpload"
	TextGeneration_MultiFileUpload_FullMethodName             = "/textgeneration.TextGeneration/MultiFileUpload"
)

// TextGenerationClient is the client API for TextGeneration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextGenerationClient interface {
	// Sends a respone containing model generated text and expects a single response from the server
	ProcessTextGen(ctx context.Context, in *TextGenPrompt, opts ...grpc.CallOption) (*TextGenResponse, error)
	// Sends a stream of 3 responses for a single prompt request
	ProcessTextGenMultiStream(ctx context.Context, in *TextGenPrompt, opts ...grpc.CallOption) (TextGeneration_ProcessTextGenMultiStreamClient, error)
	// Sends a single response for a stream of prompt requests
	ProcessTextGenStreamRequest(ctx context.Context, opts ...grpc.CallOption) (TextGeneration_ProcessTextGenStreamRequestClient, error)
	// Sends a stream of responses for a stream of requests
	ProcessTextGenStream(ctx context.Context, opts ...grpc.CallOption) (TextGeneration_ProcessTextGenStreamClient, error)
	// Upload a text file with input prompt and receive a response
	SingleFileUpload(ctx context.Context, in *FileUpload, opts ...grpc.CallOption) (*TextGenResponse, error)
	// Upload multiple files and get back a stream of responses
	MultiFileUpload(ctx context.Context, opts ...grpc.CallOption) (TextGeneration_MultiFileUploadClient, error)
}

type textGenerationClient struct {
	cc grpc.ClientConnInterface
}

func NewTextGenerationClient(cc grpc.ClientConnInterface) TextGenerationClient {
	return &textGenerationClient{cc}
}

func (c *textGenerationClient) ProcessTextGen(ctx context.Context, in *TextGenPrompt, opts ...grpc.CallOption) (*TextGenResponse, error) {
	out := new(TextGenResponse)
	err := c.cc.Invoke(ctx, TextGeneration_ProcessTextGen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textGenerationClient) ProcessTextGenMultiStream(ctx context.Context, in *TextGenPrompt, opts ...grpc.CallOption) (TextGeneration_ProcessTextGenMultiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGeneration_ServiceDesc.Streams[0], TextGeneration_ProcessTextGenMultiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textGenerationProcessTextGenMultiStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextGeneration_ProcessTextGenMultiStreamClient interface {
	Recv() (*TextGenResponse, error)
	grpc.ClientStream
}

type textGenerationProcessTextGenMultiStreamClient struct {
	grpc.ClientStream
}

func (x *textGenerationProcessTextGenMultiStreamClient) Recv() (*TextGenResponse, error) {
	m := new(TextGenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textGenerationClient) ProcessTextGenStreamRequest(ctx context.Context, opts ...grpc.CallOption) (TextGeneration_ProcessTextGenStreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGeneration_ServiceDesc.Streams[1], TextGeneration_ProcessTextGenStreamRequest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textGenerationProcessTextGenStreamRequestClient{stream}
	return x, nil
}

type TextGeneration_ProcessTextGenStreamRequestClient interface {
	Send(*TextGenPrompt) error
	CloseAndRecv() (*TextGenResponse, error)
	grpc.ClientStream
}

type textGenerationProcessTextGenStreamRequestClient struct {
	grpc.ClientStream
}

func (x *textGenerationProcessTextGenStreamRequestClient) Send(m *TextGenPrompt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textGenerationProcessTextGenStreamRequestClient) CloseAndRecv() (*TextGenResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TextGenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textGenerationClient) ProcessTextGenStream(ctx context.Context, opts ...grpc.CallOption) (TextGeneration_ProcessTextGenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGeneration_ServiceDesc.Streams[2], TextGeneration_ProcessTextGenStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textGenerationProcessTextGenStreamClient{stream}
	return x, nil
}

type TextGeneration_ProcessTextGenStreamClient interface {
	Send(*TextGenPrompt) error
	Recv() (*TextGenResponse, error)
	grpc.ClientStream
}

type textGenerationProcessTextGenStreamClient struct {
	grpc.ClientStream
}

func (x *textGenerationProcessTextGenStreamClient) Send(m *TextGenPrompt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textGenerationProcessTextGenStreamClient) Recv() (*TextGenResponse, error) {
	m := new(TextGenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textGenerationClient) SingleFileUpload(ctx context.Context, in *FileUpload, opts ...grpc.CallOption) (*TextGenResponse, error) {
	out := new(TextGenResponse)
	err := c.cc.Invoke(ctx, TextGeneration_SingleFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textGenerationClient) MultiFileUpload(ctx context.Context, opts ...grpc.CallOption) (TextGeneration_MultiFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextGeneration_ServiceDesc.Streams[3], TextGeneration_MultiFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textGenerationMultiFileUploadClient{stream}
	return x, nil
}

type TextGeneration_MultiFileUploadClient interface {
	Send(*FileUpload) error
	Recv() (*TextGenResponse, error)
	grpc.ClientStream
}

type textGenerationMultiFileUploadClient struct {
	grpc.ClientStream
}

func (x *textGenerationMultiFileUploadClient) Send(m *FileUpload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textGenerationMultiFileUploadClient) Recv() (*TextGenResponse, error) {
	m := new(TextGenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextGenerationServer is the server API for TextGeneration service.
// All implementations must embed UnimplementedTextGenerationServer
// for forward compatibility
type TextGenerationServer interface {
	// Sends a respone containing model generated text and expects a single response from the server
	ProcessTextGen(context.Context, *TextGenPrompt) (*TextGenResponse, error)
	// Sends a stream of 3 responses for a single prompt request
	ProcessTextGenMultiStream(*TextGenPrompt, TextGeneration_ProcessTextGenMultiStreamServer) error
	// Sends a single response for a stream of prompt requests
	ProcessTextGenStreamRequest(TextGeneration_ProcessTextGenStreamRequestServer) error
	// Sends a stream of responses for a stream of requests
	ProcessTextGenStream(TextGeneration_ProcessTextGenStreamServer) error
	// Upload a text file with input prompt and receive a response
	SingleFileUpload(context.Context, *FileUpload) (*TextGenResponse, error)
	// Upload multiple files and get back a stream of responses
	MultiFileUpload(TextGeneration_MultiFileUploadServer) error
	mustEmbedUnimplementedTextGenerationServer()
}

// UnimplementedTextGenerationServer must be embedded to have forward compatible implementations.
type UnimplementedTextGenerationServer struct {
}

func (UnimplementedTextGenerationServer) ProcessTextGen(context.Context, *TextGenPrompt) (*TextGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTextGen not implemented")
}
func (UnimplementedTextGenerationServer) ProcessTextGenMultiStream(*TextGenPrompt, TextGeneration_ProcessTextGenMultiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessTextGenMultiStream not implemented")
}
func (UnimplementedTextGenerationServer) ProcessTextGenStreamRequest(TextGeneration_ProcessTextGenStreamRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessTextGenStreamRequest not implemented")
}
func (UnimplementedTextGenerationServer) ProcessTextGenStream(TextGeneration_ProcessTextGenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessTextGenStream not implemented")
}
func (UnimplementedTextGenerationServer) SingleFileUpload(context.Context, *FileUpload) (*TextGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleFileUpload not implemented")
}
func (UnimplementedTextGenerationServer) MultiFileUpload(TextGeneration_MultiFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiFileUpload not implemented")
}
func (UnimplementedTextGenerationServer) mustEmbedUnimplementedTextGenerationServer() {}

// UnsafeTextGenerationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextGenerationServer will
// result in compilation errors.
type UnsafeTextGenerationServer interface {
	mustEmbedUnimplementedTextGenerationServer()
}

func RegisterTextGenerationServer(s grpc.ServiceRegistrar, srv TextGenerationServer) {
	s.RegisterService(&TextGeneration_ServiceDesc, srv)
}

func _TextGeneration_ProcessTextGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextGenPrompt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextGenerationServer).ProcessTextGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextGeneration_ProcessTextGen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextGenerationServer).ProcessTextGen(ctx, req.(*TextGenPrompt))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextGeneration_ProcessTextGenMultiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextGenPrompt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextGenerationServer).ProcessTextGenMultiStream(m, &textGenerationProcessTextGenMultiStreamServer{stream})
}

type TextGeneration_ProcessTextGenMultiStreamServer interface {
	Send(*TextGenResponse) error
	grpc.ServerStream
}

type textGenerationProcessTextGenMultiStreamServer struct {
	grpc.ServerStream
}

func (x *textGenerationProcessTextGenMultiStreamServer) Send(m *TextGenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TextGeneration_ProcessTextGenStreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextGenerationServer).ProcessTextGenStreamRequest(&textGenerationProcessTextGenStreamRequestServer{stream})
}

type TextGeneration_ProcessTextGenStreamRequestServer interface {
	SendAndClose(*TextGenResponse) error
	Recv() (*TextGenPrompt, error)
	grpc.ServerStream
}

type textGenerationProcessTextGenStreamRequestServer struct {
	grpc.ServerStream
}

func (x *textGenerationProcessTextGenStreamRequestServer) SendAndClose(m *TextGenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textGenerationProcessTextGenStreamRequestServer) Recv() (*TextGenPrompt, error) {
	m := new(TextGenPrompt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TextGeneration_ProcessTextGenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextGenerationServer).ProcessTextGenStream(&textGenerationProcessTextGenStreamServer{stream})
}

type TextGeneration_ProcessTextGenStreamServer interface {
	Send(*TextGenResponse) error
	Recv() (*TextGenPrompt, error)
	grpc.ServerStream
}

type textGenerationProcessTextGenStreamServer struct {
	grpc.ServerStream
}

func (x *textGenerationProcessTextGenStreamServer) Send(m *TextGenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textGenerationProcessTextGenStreamServer) Recv() (*TextGenPrompt, error) {
	m := new(TextGenPrompt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TextGeneration_SingleFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextGenerationServer).SingleFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextGeneration_SingleFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextGenerationServer).SingleFileUpload(ctx, req.(*FileUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextGeneration_MultiFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextGenerationServer).MultiFileUpload(&textGenerationMultiFileUploadServer{stream})
}

type TextGeneration_MultiFileUploadServer interface {
	Send(*TextGenResponse) error
	Recv() (*FileUpload, error)
	grpc.ServerStream
}

type textGenerationMultiFileUploadServer struct {
	grpc.ServerStream
}

func (x *textGenerationMultiFileUploadServer) Send(m *TextGenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textGenerationMultiFileUploadServer) Recv() (*FileUpload, error) {
	m := new(FileUpload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextGeneration_ServiceDesc is the grpc.ServiceDesc for TextGeneration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextGeneration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textgeneration.TextGeneration",
	HandlerType: (*TextGenerationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTextGen",
			Handler:    _TextGeneration_ProcessTextGen_Handler,
		},
		{
			MethodName: "SingleFileUpload",
			Handler:    _TextGeneration_SingleFileUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessTextGenMultiStream",
			Handler:       _TextGeneration_ProcessTextGenMultiStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessTextGenStreamRequest",
			Handler:       _TextGeneration_ProcessTextGenStreamRequest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessTextGenStream",
			Handler:       _TextGeneration_ProcessTextGenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiFileUpload",
			Handler:       _TextGeneration_MultiFileUpload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "textgeneration_go.proto",
}

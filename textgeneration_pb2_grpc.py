# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import textgeneration_pb2 as textgeneration__pb2


class TextGenerationStub(object):
    """The textgeneration service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessTextGen = channel.unary_unary(
                '/textgeneration.TextGeneration/ProcessTextGen',
                request_serializer=textgeneration__pb2.TextGenPrompt.SerializeToString,
                response_deserializer=textgeneration__pb2.TextGenResponse.FromString,
                )
        self.ProcessTextGenMultiStream = channel.unary_stream(
                '/textgeneration.TextGeneration/ProcessTextGenMultiStream',
                request_serializer=textgeneration__pb2.TextGenPrompt.SerializeToString,
                response_deserializer=textgeneration__pb2.TextGenResponse.FromString,
                )
        self.ProcessTextGenStreamRequest = channel.stream_unary(
                '/textgeneration.TextGeneration/ProcessTextGenStreamRequest',
                request_serializer=textgeneration__pb2.TextGenPrompt.SerializeToString,
                response_deserializer=textgeneration__pb2.TextGenResponse.FromString,
                )
        self.ProcessTextGenStream = channel.stream_stream(
                '/textgeneration.TextGeneration/ProcessTextGenStream',
                request_serializer=textgeneration__pb2.TextGenPrompt.SerializeToString,
                response_deserializer=textgeneration__pb2.TextGenResponse.FromString,
                )
        self.SingleFileUpload = channel.unary_unary(
                '/textgeneration.TextGeneration/SingleFileUpload',
                request_serializer=textgeneration__pb2.FileUpload.SerializeToString,
                response_deserializer=textgeneration__pb2.TextGenResponse.FromString,
                )
        self.MultiFileUpload = channel.stream_stream(
                '/textgeneration.TextGeneration/MultiFileUpload',
                request_serializer=textgeneration__pb2.FileUpload.SerializeToString,
                response_deserializer=textgeneration__pb2.TextGenResponse.FromString,
                )


class TextGenerationServicer(object):
    """The textgeneration service definition.
    """

    def ProcessTextGen(self, request, context):
        """Sends a respone containing model generated text and expects a single response from the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessTextGenMultiStream(self, request, context):
        """Sends a stream of 3 responses for a single prompt request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessTextGenStreamRequest(self, request_iterator, context):
        """Sends a single response for a stream of prompt requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessTextGenStream(self, request_iterator, context):
        """Sends a stream of responses for a stream of requests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SingleFileUpload(self, request, context):
        """Upload a text file with input prompt and receive a response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiFileUpload(self, request_iterator, context):
        """Upload multiple files and get back a stream of responses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextGenerationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessTextGen': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessTextGen,
                    request_deserializer=textgeneration__pb2.TextGenPrompt.FromString,
                    response_serializer=textgeneration__pb2.TextGenResponse.SerializeToString,
            ),
            'ProcessTextGenMultiStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessTextGenMultiStream,
                    request_deserializer=textgeneration__pb2.TextGenPrompt.FromString,
                    response_serializer=textgeneration__pb2.TextGenResponse.SerializeToString,
            ),
            'ProcessTextGenStreamRequest': grpc.stream_unary_rpc_method_handler(
                    servicer.ProcessTextGenStreamRequest,
                    request_deserializer=textgeneration__pb2.TextGenPrompt.FromString,
                    response_serializer=textgeneration__pb2.TextGenResponse.SerializeToString,
            ),
            'ProcessTextGenStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessTextGenStream,
                    request_deserializer=textgeneration__pb2.TextGenPrompt.FromString,
                    response_serializer=textgeneration__pb2.TextGenResponse.SerializeToString,
            ),
            'SingleFileUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.SingleFileUpload,
                    request_deserializer=textgeneration__pb2.FileUpload.FromString,
                    response_serializer=textgeneration__pb2.TextGenResponse.SerializeToString,
            ),
            'MultiFileUpload': grpc.stream_stream_rpc_method_handler(
                    servicer.MultiFileUpload,
                    request_deserializer=textgeneration__pb2.FileUpload.FromString,
                    response_serializer=textgeneration__pb2.TextGenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'textgeneration.TextGeneration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextGeneration(object):
    """The textgeneration service definition.
    """

    @staticmethod
    def ProcessTextGen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/textgeneration.TextGeneration/ProcessTextGen',
            textgeneration__pb2.TextGenPrompt.SerializeToString,
            textgeneration__pb2.TextGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessTextGenMultiStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/textgeneration.TextGeneration/ProcessTextGenMultiStream',
            textgeneration__pb2.TextGenPrompt.SerializeToString,
            textgeneration__pb2.TextGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessTextGenStreamRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/textgeneration.TextGeneration/ProcessTextGenStreamRequest',
            textgeneration__pb2.TextGenPrompt.SerializeToString,
            textgeneration__pb2.TextGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessTextGenStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/textgeneration.TextGeneration/ProcessTextGenStream',
            textgeneration__pb2.TextGenPrompt.SerializeToString,
            textgeneration__pb2.TextGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SingleFileUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/textgeneration.TextGeneration/SingleFileUpload',
            textgeneration__pb2.FileUpload.SerializeToString,
            textgeneration__pb2.TextGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiFileUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/textgeneration.TextGeneration/MultiFileUpload',
            textgeneration__pb2.FileUpload.SerializeToString,
            textgeneration__pb2.TextGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
